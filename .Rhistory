bold(ht)[1,]           <- TRUE
bottom_border(ht)[1,]  <- 0.4
align(ht)[,2]          <- "right"
right_padding(ht)      <- 10
left_padding(ht)       <- 10
width(ht)              <- 0.35
number_format(ht)      <- 2
ht
# Chunk 6
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
# First we only want newer movies, released after 2017, with a popularity tier of level 4:
newies = new_pop(tidy_q, 2018,4)
genres = newies$genres
action = genre_count(genres, 'action')
romance = genre_count(genres, 'romance')
thriller = genre_count(genres, 'thriller')
comedy = genre_count(genres, 'comedy')
horror = genre_count(genres, 'horror')
drama = genre_count(genres, 'drama')
crime = genre_count(genres, 'crime')
scifi = genre_count(genres, 'scifi')
fantasy = genre_count(genres, 'fantasy')
european = genre_count(genres, 'european')
music = genre_count(genres, 'music')
genre_df = data.frame(genre = c('action','romance','thriller','comedy','horror','drama','crime','scifi','fantasy','european','music'),count = c(action, romance, thriller, comedy,horror,drama,crime,scifi,fantasy,european,music))
# Chunk 7: Figure2
barp = barplot(genre_df$count,
main = "Most popular genres",
xlab = "Genres",
ylab = "Count",
names = genre_df$genres,
col = "blue")
# Chunk 8
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
good_show = assess(tv$imdb_score)
popular_show = assess(tv$imdb_votes)
quart_show = empty(tv)
# sort for tv show quality
quart_show = sorting(quart_show,quart_show$imdb_score,good_show,quart_show$imdb_votes,popular_show)
# Chunk 9
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
tidy_show = tidy_CH(quart_show)
# Chunk 10
plot_show = tidy_show %>% arrange(age_certification) %>%group_by(release_year)%>%reframe(avg = mean(imdb_votes, na.rm=T),release_year,age_certification)
# Chunk 11: Figure3
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
s = plot2(plot_show)
print(s)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
pacman::p_load(huxtable)
#Import data
play_df = read_csv("D:/User folders/Documents/Practical/21625247/data/googleplay/googleplaystore.csv")
reviews_df = read_csv("D:/User folders/Documents/Practical/21625247/data/googleplay/googleplaystore_user_reviews.csv")
# Chunk 2
# first we have to sort out the download numbers
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_df = play_df %>% mutate(Installs = gsub('[+]','',Installs)) %>%mutate(Installs = gsub(',','',Installs)) %>%mutate(Installs = strtoi(Installs))
# Solve size as well
play_df = play_df %>% mutate(Size = gsub('[M]','',Size)) %>%mutate(Size = gsub('[Varies with device]','',Size)) %>%mutate(Size = strtoi(Size))
# Chunk 3
# Calculate average downloads and reviews for categories
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_adv = play_df %>% group_by(Genres)%>%reframe(avg_Installs = mean(Installs, na.rm=T),avg_rating = mean(Rating, na.rm=T), Size)
# Chunk 4: Figure1
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
f = figure(play_adv)
print(f)
View(figure)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
pacman::p_load(huxtable)
#Import data
play_df = read_csv("D:/User folders/Documents/Practical/21625247/data/googleplay/googleplaystore.csv")
reviews_df = read_csv("D:/User folders/Documents/Practical/21625247/data/googleplay/googleplaystore_user_reviews.csv")
# Chunk 2
# first we have to sort out the download numbers
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_df = play_df %>% mutate(Installs = gsub('[+]','',Installs)) %>%mutate(Installs = gsub(',','',Installs)) %>%mutate(Installs = strtoi(Installs))
# Solve size as well
play_df = play_df %>% mutate(Size = gsub('[M]','',Size)) %>%mutate(Size = gsub('[Varies with device]','',Size)) %>%mutate(Size = strtoi(Size))
# Chunk 3
# Calculate average downloads and reviews for categories
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_adv = play_df %>% group_by(Genres)%>%reframe(avg_Installs = mean(Installs, na.rm=T),avg_rating = mean(Rating, na.rm=T), Size)
# Chunk 4: Figure1
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
f  =hux(
Genres = play_adv$Genres,
"Average amount of Installs" = play_adv$avg_Installs,
"Average rating" = play_adv$avg_rating,
add_colnames = TRUE)
bold(ht)[1,]           <- TRUE
bottom_border(ht)[1,]  <- 0.4
align(ht)[,2]          <- "right"
right_padding(ht)      <- 10
left_padding(ht)       <- 10
width(ht)              <- 0.35
number_format(ht)      <- 2
ht
print(f)
# Chunk 5
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
dl_sizes = assess(play_adv$Size)
print(dl_sizes)
#play_adv = empty(play_adv)
play_adv = sorting(play_adv,play_adv$Size,dl_sizes)
play_2 = play_adv %>% group_by(size_bracket)%>%reframe(avg_Installs=mean(avg_Installs))
# Chunk 6: Figure2
barp = barplot(play_2$avg_Installs,
main = "App ",
xlab = "Size bracket",
ylab = "Count",
names = play_2$size_bracket,
col = "green")
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
ht  =hux(
Genres = play_adv$Genres,
"Average amount of Installs" = play_adv$avg_Installs,
"Average rating" = play_adv$avg_rating,
add_colnames = TRUE)
bold(ht)[1,]           <- TRUE
bottom_border(ht)[1,]  <- 0.4
align(ht)[,2]          <- "right"
right_padding(ht)      <- 10
left_padding(ht)       <- 10
width(ht)              <- 0.35
number_format(ht)      <- 2
ht
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
pacman::p_load(huxtable)
#Import data
play_df = read_csv("D:/User folders/Documents/Practical/21625247/data/googleplay/googleplaystore.csv")
reviews_df = read_csv("D:/User folders/Documents/Practical/21625247/data/googleplay/googleplaystore_user_reviews.csv")
# Chunk 2
# first we have to sort out the download numbers
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_df = play_df %>% mutate(Installs = gsub('[+]','',Installs)) %>%mutate(Installs = gsub(',','',Installs)) %>%mutate(Installs = strtoi(Installs))
# Solve size as well
play_df = play_df %>% mutate(Size = gsub('[M]','',Size)) %>%mutate(Size = gsub('[Varies with device]','',Size)) %>%mutate(Size = strtoi(Size))
# Chunk 3
# Calculate average downloads and reviews for categories
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_adv = play_df %>% group_by(Genres)%>%reframe(avg_Installs = mean(Installs, na.rm=T),avg_rating = mean(Rating, na.rm=T), Size)
play_adv = unique(play_adv)
# Chunk 4: Figure1
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
ht  =hux(
Genres = play_adv$Genres,
"Average amount of Installs" = play_adv$avg_Installs,
"Average rating" = play_adv$avg_rating,
add_colnames = TRUE)
bold(ht)[1,]           <- TRUE
bottom_border(ht)[1,]  <- 0.4
align(ht)[,2]          <- "right"
right_padding(ht)      <- 10
left_padding(ht)       <- 10
width(ht)              <- 0.35
number_format(ht)      <- 2
ht
# Chunk 5
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
dl_sizes = assess(play_adv$Size)
print(dl_sizes)
#play_adv = empty(play_adv)
play_adv = sorting(play_adv,play_adv$Size,dl_sizes)
play_2 = play_adv %>% group_by(size_bracket)%>%reframe(avg_Installs=mean(avg_Installs))
# Chunk 6: Figure2
barp = barplot(play_2$avg_Installs,
main = "App ",
xlab = "Size bracket",
ylab = "Count",
names = play_2$size_bracket,
col = "green")
# Calculate average downloads and reviews for categories
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_adv = play_df %>% group_by(Genres)%>%reframe(avg_Installs = mean(Installs, na.rm=T),avg_rating = mean(Rating, na.rm=T), Size)
play_adv = unique(play_adv)
View(play_adv)
# Calculate average downloads and reviews for categories
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_adv = play_df %>% group_by(Genres)%>%reframe(avg_Installs = mean(Installs, na.rm=T),avg_rating = mean(Rating, na.rm=T))
play_adv = unique(play_adv)
# Calculate average downloads and reviews for categories
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_adv = play_df %>% group_by(Genres)%>%reframe(avg_Installs = mean(Installs, na.rm=T),avg_rating = mean(Rating, na.rm=T), Size)
play_adv = unique(play_adv)
# Calculate average downloads and reviews for categories
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_5/code")
play_adv = play_df %>% group_by(Genres)%>%reframe(avg_Installs = mean(Installs, na.rm=T),avg_rating = mean(Rating, na.rm=T))
play_adv = unique(play_adv)
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
# First we only want newer movies, released after 2017, with a popularity tier of level 4:
newies = new_pop(tidy_q, 2018,4)
genres = newies$genres
action = genre_count(genres, 'action')
romance = genre_count(genres, 'romance')
thriller = genre_count(genres, 'thriller')
comedy = genre_count(genres, 'comedy')
horror = genre_count(genres, 'horror')
drama = genre_count(genres, 'drama')
crime = genre_count(genres, 'crime')
scifi = genre_count(genres, 'scifi')
fantasy = genre_count(genres, 'fantasy')
european = genre_count(genres, 'european')
music = genre_count(genres, 'music')
genre_df = data.frame(genre = c('action','romance','thriller','comedy','horror','drama','crime','scifi','fantasy','european','music'),count = c(action, romance, thriller, comedy,horror,drama,crime,scifi,fantasy,european,music))
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df)
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df)
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df)
print(a)
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df)
print(a)
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df,genre_df$genre,genre_df$count)
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df,genre_df$genre,genre_df$count)
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df,genre_df$genre,genre_df$count)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Lets load in example data, and see how this can be stored and later called from your 'data' folder.
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
pacman::p_load(huxtable)
pacman::p_load(forcats)
credits = read.csv("D:/User folders/Documents/Practical/21625247/data/netflix/credits.csv")
titles = read.csv("D:/User folders/Documents/Practical/21625247/data/netflix/titles.csv")
merged = full_join(credits, titles, by = "id")
movies = merged %>% filter(type == "MOVIE")
tv = merged %>% filter(type == "SHOW")
# Chunk 2
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
good_movie = assess(movies$imdb_score)
popular_movie = assess(movies$imdb_votes)
# Chunk 3
#add empty slots for quartiles
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
quarts = empty(movies)
# sort for movie quality
quarts = sorting(quarts,quarts$imdb_score,good_movie,quarts$imdb_votes,popular_movie)
# Chunk 4
# Get rid of the fluff
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
tidy_q = tidy_CH(quarts)
illus = table(tidy_q$good_q, tidy_q$pop_q)
illus_df = as.data.frame.matrix(illus)
# Chunk 5: Figure1
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
# Only look at the best and most popular older films:
oldies = old_gold(tidy_q,2000)
#Table it
ht =hux(
Title = oldies$title,
"Quality Quartile" = oldies$good_q,
"Popularity Quartile" = oldies$pop_q,
"Release Year" = oldies$release_year,
"Genre" = oldies$genres,
add_colnames = TRUE)
bold(ht)[1,]           <- TRUE
bottom_border(ht)[1,]  <- 0.4
align(ht)[,2]          <- "right"
right_padding(ht)      <- 10
left_padding(ht)       <- 10
width(ht)              <- 0.35
number_format(ht)      <- 2
ht
# Chunk 6
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
# First we only want newer movies, released after 2017, with a popularity tier of level 4:
newies = new_pop(tidy_q, 2018,4)
genres = newies$genres
action = genre_count(genres, 'action')
romance = genre_count(genres, 'romance')
thriller = genre_count(genres, 'thriller')
comedy = genre_count(genres, 'comedy')
horror = genre_count(genres, 'horror')
drama = genre_count(genres, 'drama')
crime = genre_count(genres, 'crime')
scifi = genre_count(genres, 'scifi')
fantasy = genre_count(genres, 'fantasy')
european = genre_count(genres, 'european')
music = genre_count(genres, 'music')
genre_df = data.frame(genre = c('action','romance','thriller','comedy','horror','drama','crime','scifi','fantasy','european','music'),count = c(action, romance, thriller, comedy,horror,drama,crime,scifi,fantasy,european,music))
# Chunk 7: Figure2
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df,genre_df$genre,genre_df$count)
print(a)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Lets load in example data, and see how this can be stored and later called from your 'data' folder.
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
pacman::p_load(huxtable)
pacman::p_load(forcats)
credits = read.csv("D:/User folders/Documents/Practical/21625247/data/netflix/credits.csv")
titles = read.csv("D:/User folders/Documents/Practical/21625247/data/netflix/titles.csv")
merged = full_join(credits, titles, by = "id")
movies = merged %>% filter(type == "MOVIE")
tv = merged %>% filter(type == "SHOW")
# Chunk 2
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
good_movie = assess(movies$imdb_score)
popular_movie = assess(movies$imdb_votes)
# Chunk 3
#add empty slots for quartiles
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
quarts = empty(movies)
# sort for movie quality
quarts = sorting(quarts,quarts$imdb_score,good_movie,quarts$imdb_votes,popular_movie)
# Chunk 4
# Get rid of the fluff
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
tidy_q = tidy_CH(quarts)
illus = table(tidy_q$good_q, tidy_q$pop_q)
illus_df = as.data.frame.matrix(illus)
# Chunk 5: Figure1
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
# Only look at the best and most popular older films:
oldies = old_gold(tidy_q,2000)
#Table it
ht =hux(
Title = oldies$title,
"Quality Quartile" = oldies$good_q,
"Popularity Quartile" = oldies$pop_q,
"Release Year" = oldies$release_year,
"Genre" = oldies$genres,
add_colnames = TRUE)
bold(ht)[1,]           <- TRUE
bottom_border(ht)[1,]  <- 0.4
align(ht)[,2]          <- "right"
right_padding(ht)      <- 10
left_padding(ht)       <- 10
width(ht)              <- 0.35
number_format(ht)      <- 2
ht
# Chunk 6
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
# First we only want newer movies, released after 2017, with a popularity tier of level 4:
newies = new_pop(tidy_q, 2018,4)
genres = newies$genres
action = genre_count(genres, 'action')
romance = genre_count(genres, 'romance')
thriller = genre_count(genres, 'thriller')
comedy = genre_count(genres, 'comedy')
horror = genre_count(genres, 'horror')
drama = genre_count(genres, 'drama')
crime = genre_count(genres, 'crime')
scifi = genre_count(genres, 'scifi')
fantasy = genre_count(genres, 'fantasy')
european = genre_count(genres, 'european')
music = genre_count(genres, 'music')
genre_df = data.frame(genre = c('action','romance','thriller','comedy','horror','drama','crime','scifi','fantasy','european','music'),count = c(action, romance, thriller, comedy,horror,drama,crime,scifi,fantasy,european,music))
# Chunk 7: Figure2
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df,genre_df$genre,genre_df$count)
print(a)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Lets load in example data, and see how this can be stored and later called from your 'data' folder.
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
pacman::p_load(huxtable)
pacman::p_load(forcats)
credits = read.csv("D:/User folders/Documents/Practical/21625247/data/netflix/credits.csv")
titles = read.csv("D:/User folders/Documents/Practical/21625247/data/netflix/titles.csv")
merged = full_join(credits, titles, by = "id")
movies = merged %>% filter(type == "MOVIE")
tv = merged %>% filter(type == "SHOW")
# Chunk 2
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
good_movie = assess(movies$imdb_score)
popular_movie = assess(movies$imdb_votes)
# Chunk 3
#add empty slots for quartiles
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
quarts = empty(movies)
# sort for movie quality
quarts = sorting(quarts,quarts$imdb_score,good_movie,quarts$imdb_votes,popular_movie)
# Chunk 4
# Get rid of the fluff
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
tidy_q = tidy_CH(quarts)
illus = table(tidy_q$good_q, tidy_q$pop_q)
illus_df = as.data.frame.matrix(illus)
# Chunk 5: Figure1
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
# Only look at the best and most popular older films:
oldies = old_gold(tidy_q,2000)
#Table it
ht =hux(
Title = oldies$title,
"Quality Quartile" = oldies$good_q,
"Popularity Quartile" = oldies$pop_q,
"Release Year" = oldies$release_year,
"Genre" = oldies$genres,
add_colnames = TRUE)
bold(ht)[1,]           <- TRUE
bottom_border(ht)[1,]  <- 0.4
align(ht)[,2]          <- "right"
right_padding(ht)      <- 10
left_padding(ht)       <- 10
width(ht)              <- 0.35
number_format(ht)      <- 2
ht
# Chunk 6
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
# First we only want newer movies, released after 2017, with a popularity tier of level 4:
newies = new_pop(tidy_q, 2018,4)
genres = newies$genres
action = genre_count(genres, 'action')
romance = genre_count(genres, 'romance')
thriller = genre_count(genres, 'thriller')
comedy = genre_count(genres, 'comedy')
horror = genre_count(genres, 'horror')
drama = genre_count(genres, 'drama')
crime = genre_count(genres, 'crime')
scifi = genre_count(genres, 'scifi')
fantasy = genre_count(genres, 'fantasy')
european = genre_count(genres, 'european')
music = genre_count(genres, 'music')
genre_df = data.frame(genre = c('action','romance','thriller','comedy','horror','drama','crime','scifi','fantasy','european','music'),count = c(action, romance, thriller, comedy,horror,drama,crime,scifi,fantasy,european,music))
# Chunk 7: Figure2
#barp = barplot(genre_df$count,
#              main = "Most popular genres",
#             xlab = "Genres",
#            ylab = "Count",
#           names = genre_df$genres,
#          col = "blue")
a = barp(genre_df,genre_df$genre,genre_df$count)
print(a)
# Chunk 8
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
good_show = assess(tv$imdb_score)
popular_show = assess(tv$imdb_votes)
quart_show = empty(tv)
# sort for tv show quality
quart_show = sorting(quart_show,quart_show$imdb_score,good_show,quart_show$imdb_votes,popular_show)
# Chunk 9
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
tidy_show = tidy_CH(quart_show)
# Chunk 10
plot_show = tidy_show %>% arrange(age_certification) %>%group_by(release_year)%>%reframe(avg = mean(imdb_votes, na.rm=T),release_year,age_certification)
# Chunk 11: Figure3
fmxdat::source_all("D:/User folders/Documents/Practical/21625247/Question_4/code")
s = plot2(plot_show)
print(s)
